# ubuntu = Ubuntu Linux box, g++, openmpi, FFTW3

# you have to install the packages g++, mpi-default-bin, mpi-default-dev,
# libfftw3-dev, libjpeg-dev and libpng12-dev to compile LAMMPS with this
# makefile

SHELL = /bin/sh

# ---------------------------------------------------------------------
# compiler/linker settings
# specify flags and libraries needed for your compiler

CC =		mpiCC
CCFLAGS =	-O3 -OPT:IEEE_arithmetic=3 -DSUNWAY -g # -Wunused
SHFLAGS =	-fPIC
DEP = gcc
DEPFLAGS =	-M

LINK =		mpiCC
LINKFLAGS =	-hybrid -O3  -g -OPT:IEEE_arithmetic=3
LIB =           ../libgptl.a ../poly_math_post.o
SIZE =		size

SLAVE_CC =	sw5cc -slave
SLAVE_CFLAGS = -O3 -msimd -OPT:IEEE_arithmetic=3 -DCPE -g -CG:pjump_all

HOST_CC =	mpicc -host
HOST_CFLAGS = -O3 -msimd -DMPE -g -OPT:IEEE_arithmetic=3

ARCHIVE =	ar
ARFLAGS =	-rc
SHLIBFLAGS =	-shared

# ---------------------------------------------------------------------
# LAMMPS-specific settings, all OPTIONAL
# specify settings for LAMMPS features you will use
# if you change any -D setting, do full re-compile after "make clean"

# LAMMPS ifdef settings
# see possible settings in Section 2.2 (step 4) of manual

LMP_INC =	#-DLAMMPS_GZIP -DLAMMPS_JPEG -DLAMMPS_PNG -DLAMMPS_FFMPEG
LMP_INC =	#-DLAMMPS_GZIP
# MPI library
# see discussion in Section 2.2 (step 5) of manual
# MPI wrapper compiler/linker can provide this info
# can point to dummy MPI library in src/STUBS as in Makefile.serial
# use -D MPICH and OMPI settings in INC to avoid C++ lib conflicts
# INC = path for mpi.h, MPI compiler settings
# PATH = path for MPI library
# LIB = name of MPI library

MPI_INC =
MPI_PATH = 
MPI_LIB =

# FFT library
# see discussion in Section 2.2 (step 6) of manaul
# can be left blank to use provided KISS FFT library
# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings
# PATH = path for FFT library
# LIB = name of FFT library

FFT_INC = 
FFT_PATH = 
FFT_LIB = 

# JPEG and/or PNG library
# see discussion in Section 2.2 (step 7) of manual
# only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC
# INC = path(s) for jpeglib.h and/or png.h
# PATH = path(s) for JPEG library and/or PNG library
# LIB = name(s) of JPEG library and/or PNG library

JPG_INC =       
JPG_PATH = 	
JPG_LIB = #-ljpeg -lpng

# ---------------------------------------------------------------------
# build rules and dependencies
# do not edit this section

include	Makefile.package.settings
include	Makefile.package

EXTRA_INC = $(LMP_INC) $(PKG_INC) $(MPI_INC) $(FFT_INC) $(JPG_INC) $(PKG_SYSINC)
EXTRA_PATH = $(PKG_PATH) $(MPI_PATH) $(FFT_PATH) $(JPG_PATH) $(PKG_SYSPATH)
EXTRA_LIB = $(PKG_LIB) $(MPI_LIB) $(FFT_LIB) $(JPG_LIB) $(PKG_SYSLIB)
EXTRA_CPP_DEPENDS = $(PKG_CPP_DEPENDS)
EXTRA_LINK_DEPENDS = $(PKG_LINK_DEPENDS)
# Path to src files

vpath %.cpp ..
vpath %.c ..
vpath %.h ..
C_SRC = $(wildcard ../*.c)
C_OBJ = $(patsubst ../%.c, %.o, $(C_SRC))

$(EXE):	$(OBJ) $(C_OBJ) $(EXTRA_LINK_DEPENDS)
	$(LINK) $(LINKFLAGS) $(EXTRA_PATH) $(OBJ) $(C_OBJ) $(EXTRA_LIB) $(LIB) -o $(EXE)
	$(SIZE) $(EXE)

# Library targets

lib:	$(OBJ) $(EXTRA_LINK_DEPENDS)
	$(ARCHIVE) $(ARFLAGS) $(EXE) $(OBJ)

shlib:	$(OBJ) $(EXTRA_LINK_DEPENDS)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) -o $(EXE) \
        $(OBJ) $(EXTRA_LIB) $(LIB)

# Compilation rules

%.o:%.cpp $(EXTRA_CPP_DEPENDS)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<

%.d:%.cpp $(EXTRA_CPP_DEPENDS)
	$(DEP) $(CCFLAGS) $(EXTRA_INC) $(DEPFLAGS) $< > $@

%.o:%.cu $(EXTRA_CPP_DEPENDS)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<
%.o: %.c
	$(SLAVE_CC) $(SLAVE_CFLAGS) -c $< -o $@_slave.o
	$(HOST_CC) $(HOST_CFLAGS) -c $< -o $@_host.o
	sw5ar -cr $@ $@_slave.o $@_host.o
	rm $@_slave.o $@_host.o
#%.cpe.o: %.c
#	$(SLAVE_CC) $(SLAVE_CFLAGS) -c $< -o $@
#%.mpe.o: %.c
#	$(HOST_CC) $(HOST_CFLAGS) -c $< -o $@
# Individual dependencies

#depend: .depend
ifeq ($(SKIPDEP), 1)
depend: 
	@echo "Skipping dep check"
else
depend: fastdep.exe $(SRC) $(C_SRC)
	@./fastdep.exe $(EXTRA_INC) -- $^ > .depend || exit 1
endif
fastdep.exe: ../DEPEND/fastdep.c
	cc -O -o $@ $<

sinclude .depend
